# A collector defining standard metrics for Microsoft SQL Server.
#
# It is required that the SQL Server user has the following permissions:
#
#   GRANT VIEW ANY DEFINITION TO
#   GRANT VIEW SERVER STATE TO
#
collector_name: mssql_standard

# Similar to global.min_interval, but applies to the queries defined by this collector only.
#min_interval: 0s

metrics:
  - metric_name: mssql_local_time_seconds
    type: gauge
    help: 'Local time in seconds since epoch (Unix time).'
    values: [unix_time]
    query: |
      SELECT DATEDIFF(second, '19700101', GETUTCDATE()) AS unix_time

  - metric_name: mssql_connections
    type: gauge
    help: 'Number of active connections.'
    key_labels:
      - db
    values: [count]
    query: |
      SELECT DB_NAME(sp.dbid) AS db, COUNT(sp.spid) AS count
      FROM sys.sysprocesses sp
      GROUP BY DB_NAME(sp.dbid)

  #
  # Collected from sys.dm_os_performance_counters
  #
  - metric_name: mssql_deadlocks
    type: counter
    help: 'Number of lock requests that resulted in a deadlock.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Number of Deadlocks/sec' AND instance_name = '_Total'

  - metric_name: mssql_user_errors
    type: counter
    help: 'Number of user errors.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Errors/sec' AND instance_name = 'User Errors'

  - metric_name: mssql_kill_connection_errors
    type: counter
    help: 'Number of severe errors that caused SQL Server to kill the connection.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Errors/sec' AND instance_name = 'Kill Connection Errors'

  - metric_name: mssql_page_life_expectancy_seconds
    type: gauge
    help: 'The minimum number of seconds a page will stay in the buffer pool on this node without references.'
    values: [cntr_value]
    query: |
      SELECT top(1) cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Page life expectancy'

  - metric_name: mssql_batch_requests
    type: counter
    help: 'Number of command batches received.'
    values: [cntr_value]
    query: |
      SELECT cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Batch Requests/sec'

  - metric_name: mssql_log_growths
    type: counter
    help: 'Number of times the transaction log has been expanded, per database.'
    key_labels:
      - db
    values: [cntr_value]
    query: |
      SELECT rtrim(instance_name) AS db, cntr_value
      FROM sys.dm_os_performance_counters WITH (NOLOCK)
      WHERE counter_name = 'Log Growths' AND instance_name <> '_Total'

  #
  # Collected from sys.dm_io_virtual_file_stats
  #
  - metric_name: mssql_io_stall_seconds
    type: counter
    help: 'Stall time in seconds per database and I/O operation.'
    key_labels:
      - db
    value_label: operation
    values:
      - read
      - write
    query_ref: mssql_io_stall
  - metric_name: mssql_io_stall_total_seconds
    type: counter
    help: 'Total stall time in seconds per database.'
    key_labels:
      - db
    values:
      - io_stall
    query_ref: mssql_io_stall

  #
  # Collected from sys.dm_os_process_memory
  #
  - metric_name: mssql_resident_memory_bytes
    type: gauge
    help: 'SQL Server resident memory size (AKA working set).'
    values: [resident_memory_bytes]
    query_ref: mssql_process_memory

  - metric_name: mssql_virtual_memory_bytes
    type: gauge
    help: 'SQL Server committed virtual memory size.'
    values: [virtual_memory_bytes]
    query_ref: mssql_process_memory

  - metric_name: mssql_memory_utilization_percentage
    type: gauge
    help: 'The percentage of committed memory that is in the working set.'
    values: [memory_utilization_percentage]
    query_ref: mssql_process_memory

  - metric_name: mssql_page_fault_count
    type: counter
    help: 'The number of page faults that were incurred by the SQL Server process.'
    values: [page_fault_count]
    query_ref: mssql_process_memory

  #
  # Collected from sys.dm_os_sys_memory
  #
  - metric_name: mssql_os_memory
    type: gauge
    help: 'OS physical memory, used and available.'
    value_label: 'state'
    values: [used, available]
    query: |
      SELECT
        (total_physical_memory_kb - available_physical_memory_kb) * 1024 AS used,
        available_physical_memory_kb * 1024 AS available
      FROM sys.dm_os_sys_memory

  - metric_name: mssql_os_page_file
    type: gauge
    help: 'OS page file, used and available.'
    value_label: 'state'
    values: [used, available]
    query: |
      SELECT
        (total_page_file_kb - available_page_file_kb) * 1024 AS used,
        available_page_file_kb * 1024 AS available
      FROM sys.dm_os_sys_memory

  #
  # Custom queries added by Adrien Obernesser 
  #


  - metric_name: Waits
    type: counter
    help: 'Waits statistics filtered'
    key_labels:
     - WaitType
    value_label: 'db_waits'
    values:
      - Wait_S
      - Resource_S
      - Signal_S
      - WaitCount
      - Percentage
    query_ref: Waits


queries:
  # Populates `mssql_io_stall` and `mssql_io_stall_total`
  - query_name: mssql_io_stall
    query: |
      SELECT
        cast(DB_Name(a.database_id) as varchar) AS [db],
        sum(io_stall_read_ms) / 1000.0 AS [read],
        sum(io_stall_write_ms) / 1000.0 AS [write],
        sum(io_stall) / 1000.0 AS io_stall
      FROM
        sys.dm_io_virtual_file_stats(null, null) a
      INNER JOIN sys.master_files b ON a.database_id = b.database_id AND a.file_id = b.file_id
      GROUP BY a.database_id

  # Populates `mssql_resident_memory_bytes`, `mssql_virtual_memory_bytes`, `mssql_memory_utilization_percentage` and
  # `mssql_page_fault_count`.
  - query_name: mssql_process_memory
    query: |
      SELECT
        physical_memory_in_use_kb * 1024 AS resident_memory_bytes,
        virtual_address_space_committed_kb * 1024 AS virtual_memory_bytes,
        memory_utilization_percentage,
        page_fault_count
      FROM sys.dm_os_process_memory
      


  # Populates `Waits` 
  - query_name: Waits
    query: |
      WITH [Waits] AS
          (SELECT
              [wait_type],
              [wait_time_ms] / 1000.0 AS [WaitS],
              ([wait_time_ms] - [signal_wait_time_ms]) / 1000.0 AS [ResourceS],
              [signal_wait_time_ms] / 1000.0 AS [SignalS],
              [waiting_tasks_count] AS [WaitCount],
          [max_wait_time_ms] AS [max_wait_time_ms],
          [signal_wait_time_ms] AS [signal_wait_time_ms],
              100.0 * [wait_time_ms] / SUM ([wait_time_ms]) OVER() AS [Percentage],
              ROW_NUMBER() OVER(ORDER BY [wait_time_ms] DESC) AS [RowNum]
          FROM sys.dm_os_wait_stats
          WHERE [wait_type] NOT IN (
              N'BROKER_EVENTHANDLER', 
              N'BROKER_RECEIVE_WAITFOR', 
              N'BROKER_TASK_STOP', 
              N'BROKER_TO_FLUSH', 
              N'BROKER_TRANSMITTER', 
              N'CHECKPOINT_QUEUE', 
              N'CHKPT', 
              N'CLR_AUTO_EVENT', 
              N'CLR_MANUAL_EVENT', 
              N'CLR_SEMAPHORE', 
              N'DBMIRROR_DBM_EVENT', 
              N'DBMIRROR_EVENTS_QUEUE', 
              N'DBMIRROR_WORKER_QUEUE', 
              N'DBMIRRORING_CMD', 
              N'DIRTY_PAGE_POLL', 
              N'DISPATCHER_QUEUE_SEMAPHORE', 
              N'EXECSYNC', 
              N'FSAGENT', 
              N'FT_IFTS_SCHEDULER_IDLE_WAIT', 
              N'FT_IFTSHC_MUTEX', 
              N'HADR_CLUSAPI_CALL', 
              N'HADR_FILESTREAM_IOMGR_IOCOMPLETION', 
              N'HADR_LOGCAPTURE_WAIT', 
              N'HADR_NOTIFICATION_DEQUEUE', 
              N'HADR_TIMER_TASK', 
              N'HADR_WORK_QUEUE', 
              N'KSOURCE_WAKEUP', 
              N'LAZYWRITER_SLEEP', 
              N'LOGMGR_QUEUE', 
              N'MEMORY_ALLOCATION_EXT', 
              N'ONDEMAND_TASK_QUEUE', 
              N'PREEMPTIVE_XE_GETTARGETSTATE', 
              N'PWAIT_ALL_COMPONENTS_INITIALIZED', 
              N'PWAIT_DIRECTLOGCONSUMER_GETNEXT', 
              N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP', 
              N'QDS_ASYNC_QUEUE', 
              N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP',
              N'QDS_SHUTDOWN_QUEUE', 
              N'REDO_THREAD_PENDING_WORK', 
              N'REQUEST_FOR_DEADLOCK_SEARCH', 
              N'RESOURCE_QUEUE', 
              N'SERVER_IDLE_CHECK', 
              N'SLEEP_BPOOL_FLUSH', 
              N'SLEEP_DBSTARTUP', 
              N'SLEEP_DCOMSTARTUP', 
              N'SLEEP_MASTERDBREADY', 
              N'SLEEP_MASTERMDREADY', 
              N'SLEEP_MASTERUPGRADED', 
              N'SLEEP_MSDBSTARTUP', 
              N'SLEEP_SYSTEMTASK', 
              N'SLEEP_TASK', 
              N'SLEEP_TEMPDBSTARTUP', 
              N'SNI_HTTP_ACCEPT', 
              N'SP_SERVER_DIAGNOSTICS_SLEEP', 
              N'SQLTRACE_BUFFER_FLUSH', 
              N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP', 
              N'SQLTRACE_WAIT_ENTRIES', 
              N'WAIT_FOR_RESULTS', 
              N'WAITFOR', 
              N'WAITFOR_TASKSHUTDOWN', 
              N'WAIT_XTP_RECOVERY', 
              N'WAIT_XTP_HOST_WAIT', 
              N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG', 
              N'WAIT_XTP_CKPT_CLOSE', 
              N'XE_DISPATCHER_JOIN', 
              N'XE_DISPATCHER_WAIT', 
              N'XE_TIMER_EVENT',
          N'SOS_WORK_DISPATCHER'
              )
          AND [waiting_tasks_count] > 0
          )
      SELECT
          MAX ([W1].[wait_type]) AS [WaitType],
          CAST (MAX ([W1].[WaitS]) AS DECIMAL (16,2)) AS [Wait_S],
          CAST (MAX ([W1].[ResourceS]) AS DECIMAL (16,2)) AS [Resource_S],
          CAST (MAX ([W1].[SignalS]) AS DECIMAL (16,2)) AS [Signal_S],
          MAX ([W1].[WaitCount]) AS [WaitCount],
          CAST (MAX ([W1].[Percentage]) AS DECIMAL (5,2)) AS [Percentage]
      FROM [Waits] AS [W1]
      INNER JOIN [Waits] AS [W2] ON [W2].[RowNum] <= [W1].[RowNum]
      GROUP BY [W1].[RowNum]
      HAVING SUM ([W2].[Percentage]) - MAX( [W1].[Percentage] ) < 95





